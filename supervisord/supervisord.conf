[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700
;username=admin
;password=admin

[inet_http_server]
port=127.0.0.1:9001
;username=admin
;password=admin

[supervisord]
logfile=/tmp/supervisord.log
logfile_maxbytes=10MB
logfile_backups=0
environment=
    PYTHONUNBUFFERED=1
loglevel=info
pidfile=/tmp/supervisord.pid
nodaemon=true
silent=false
minfds=1024
minprocs=200
nocleanup=true
childlogdir=/tmp

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock
;username=admin
;password=admin

;;; Servers
[program:grpc_server_python]
command=python main.py
directory=./protobuf/server/python/
environment=
    PORT="501%(process_num)1d0",
    METRICS_PORT="501%(process_num)1d5",
    PYTHONPATH="./server/python/:./server/python/proto_files"
numprocs=2
autostart=false
process_name=%(program_name)s-%(process_num)02d
stdout_logfile=/tmp/grpc-server-python.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:celery_python]
command=celery -A app.tasks:app worker -l info
directory=./protobuf/server/python
environment=
    PORT="5005%(process_num)1d",
    PYTHONPATH="./server/python/:./server/python/proto_files",
    METRICS_PORT="4101%(process_num)1d",
    PROMETHEUS_ENABLED="false"
numprocs=2
autostart=false
startretries=10
startsecs=10
process_name=%(program_name)s-%(process_num)02d
stdout_logfile=/tmp/celery-python.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

; TODO: celery exporter

[program:grpc_server_go]
command=./server.out
directory=./protobuf/server/golang/
environment=
    PORT="502%(process_num)1d0",
    METRICS_PORT="502%(process_num)1d5"
numprocs=2
autostart=false
process_name=%(program_name)s-%(process_num)02d
stdout_logfile=//tmp/grpc-server-go.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:prometheus_dynamic_targets_server]
command=./server.out
directory=./protobuf/server/golang-dynamic-targets/server.out
environment=PORT="503%(process_num)1d0"
numprocs=1
autostart=false
stdout_logfile=/tmp/promtheus-dynamic-targets-server.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:grpc_server]
programs=grpc_server_python,grpc_server_go

;;; Clients
[program:grpc_client_python]
command=python main.py
directory=./client/python/
environment=
    PYTHONPATH="./client/python/:./client/python/proto_files",
    NAME="python",
    INFINITE="true",
    METRICS_PORT="504%(process_num)2d"
numprocs=10
autostart=false
process_name=%(program_name)s-%(process_num)02d
stdout_logfile=/tmp/grpc-client-python.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:grpc_client_go]
command=./client.out
directory=./client/golang/
environment=
    NAME="golang",
    INFINITE="true",
    METRICS_PORT="505%(process_num)2d"
numprocs=10
autostart=false
process_name=%(program_name)s-%(process_num)02d
stdout_logfile=/tmp/grpc-client-go.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

;;; HAProxy
[program:haproxy]
command=haproxy -f ./haproxy/haproxy.cfg
autostart=false
stdout_logfile=/tmp/haproxy.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:haproxy]
programs=haproxy

;;; Prometheus
[program:haproxy_exporter]
command=haproxy_exporter --haproxy.scrape-uri="http://localhost:1936/;csv"
autostart=false
stdout_logfile=/tmp/haproxy-exporter.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:prometheus]
command=prometheus 
    --config.file ./prometheus/prometheus.yml
    --web.console.templates ./prometheus/console
    --web.console.libraries ./prometheus/console/libraries
    --web.enable-lifecycle
    --web.enable-admin-api
    --storage.tsdb.path persistence/prometheus
    --storage.tsdb.retention.time 30d
    --enable-feature memory-snapshot-on-shutdown,new-service-discovery-manager
    --web.config.file ./prometheus/web-config.yml
stdout_logfile=/tmp/prometheus.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:prometheus_federate]
command=prometheus 
    --config.file ./prometheus/prometheus-federate.yml
     --storage.tsdb.path /tmp/prometheus-federate
    --web.console.templates ./prometheus/console
    --web.console.libraries ./prometheus/console/libraries
    --web.enable-lifecycle
    --web.enable-admin-api
    ; --enable-feature agent
    --web.config.file ./prometheus/web-config.yml
    --web.listen-address "0.0.0.0:9080"
autostart=false
stdout_logfile=/tmp/prometheus-federate.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:alertmanager]
command=alertmanager --config.file ./prometheus/alertmanager.yml
autostart=false
stdout_logfile=/tmp/alertmanager.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:grafana]
; running on `host` network because it needs to talk to prometheus over localhost
command=docker run -v grafana:/var/lib/grafana --rm --name grafana --network host grafana/grafana
autostart=false
stdout_logfile=/tmp/grafana.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:node_exporter]
command=node_exporter
    --collector.supervisord
    --collector.tcpstat
    --collector.systemd
    --collector.sysctl
    --collector.ntp
    --collector.network_route
    --collector.mountstats
    --collector.cgroups
    --collector.supervisord.url="http://localhost:9001/RPC2"
stdout_logfile=/tmp/node-exporter.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:redis]
command=docker run --rm --name redis -p 6379:6379 redis:7-alpine
autostart=false
stdout_logfile=/tmp/redis.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:dramatiq_worker]
command=dramatiq app.broker:broker app.tasks -p 4 -t 16 -Q demo --watch .
directory=./dramatiq
environment=
    QUEUE_NAME=demo,
    LOG_LEVEL=debug
autostart=false
stdout_logfile=/tmp/dramatiq-worker.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:dramatiq_web]
command=uvicorn app.web:app --host 0.0.0.0 --port 40100 --reload
directory=./dramatiq_testing
environment=
    QUEUE_NAME=demo,
    LOG_LEVEL=debug
autostart=false
stdout_logfile=/tmp/dramatiq-web.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:dramatiq]
programs=dramatiq_worker,dramatiq_web

[program:ory_mailslurper]
command=docker run --name ory-mailslurper --rm -p 1025:1025 -p 4436-4437:4436-4437 oryd/mailslurper:latest-smtps
autostart=false
stdout_logfile=/tmp/ory-mailslurper.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_kratos]
command=kratos serve -c ./ory/kratos/config.yml --dev --watch-courier
environment=
    SERVE_PUBLIC_PORT="409%(process_num)1d0",
    SERVE_ADMIN_PORT="409%(process_num)1d1",
    EXPOSE_METRICS_PORT="409%(process_num)1d2",
    SERVE_PUBLIC_BASE_URL="http://localhost:409%(process_num)1d0",
    SELFSERVICE_DEFAULT_BROWSER_RETURN_URL="http://localhost:4455/",
    SELFSERVICE_ALLOWED_RETURN_URLS="http://localhost:4455/,http://localhost:8080/",
    SELFSERVICE_FLOWS_REGISTRATION_UI_URL="http://localhost:4455/registration",
    SELFSERVICE_FLOWS_LOGIN_UI_URL="http://localhost:4455/login",
    SELFSERVICE_FLOWS_VERIFICATION_UI_URL="http://localhost:4455/verification",
    SELFSERVICE_FLOWS_RECOVERY_UI_URL="http://localhost:4455/recovery",
    SELFSERVICE_FLOWS_ERROR_UI_URL="http://localhost:4455/error",
    SELFSERVICE_FLOWS_SETTINGS_UI_URL="http://localhost:4455/settings",
    SELFSERVICE_FLOWS_REGISTRATION_AFTER_PASSWORD_DEFAULT_BROWSER_RETURN_URL="http://localhost:4455/verification"
autostart=false
stdout_logfile=/tmp/ory-kratos.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_hydra]
command=hydra serve all --dev --config ./ory/hydra/config.yml
environment=
    SERVE_ADMIN_PORT="411%(process_num)1d0",
    SERVE_PUBLIC_PORT="411%(process_num)1d1",
autostart=false
stdout_logfile=/tmp/ory-hydra.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_hydra_client]
command=python main.py
directory=./ory/hydra/client
environment=
    PORT="412%(process_num)1d0",
    DEBUG="true"
autostart=false
stdout_logfile=/tmp/hydra-client.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_keto]
command=keto serve -c ./ory/keto/config.yml
environment=
    SERVE_METRICS_PORT="4071%(process_num)1d",
    SERVE_READ_PORT="4072%(process_num)1d",
    SERVE_WRITE_PORT="4073%(process_num)1d"
numprocs=2
process_name=%(program_name)s-%(process_num)02d
autostart=false
stdout_logfile=/tmp/ory-keto.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_oathkeeper]
command=oathkeeper serve -c ./ory/oathkeeper/config.yml
autostart=false
numprocs=4
process_name=%(program_name)s-%(process_num)02d
environment=
    LOG_LEAK_SENSITIVE_VALUES="true",
    SERVE_PROXY_PORT="402%(process_num)02d",
    SERVE_API_PORT="403%(process_num)02d",
    SERVE_PROMETHEUS_PORT="404%(process_num)02d",
    AUTHENTICATORS_COOKIE_SESSION_CONFIG_CHECK_SESSION_URL="http://localhost:40900/sessions/whoami"
stdout_logfile=/tmp/ory-oathkeeper.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_kratos_serverside_client_python]
command=python main.py
directory=./ory/kratos/client/python/
environment=
    PORT="4455",
    DEBUG="true",
    KRATOS_PUBLIC_URL="http://localhost:40900"
autostart=false
stdout_logfile=/tmp/kratos-client.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:postgres]
command=docker run 
    --name postgres
    --rm
    -v postgres:/var/lib/postgresql/data
    -v "./ory/kratos/postgres/:/docker-entrypoint-initdb.d/:ro"
    -p 5432:5432
    -e "POSTGRES_DB=postgres"
    -e "POSTGRES_USER=postgres"
    -e "POSTGRES_PASSWORD=postgres"
    postgres:14
autostart=false
stdout_logfile=/tmp/postgres.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_oathkeeper_sessionstore]
command=python main.py
directory=./ory/oathkeeper/session-store/
environment=
    PORT="405%(process_num)1d0"
autostart=false
stdout_logfile=/tmp/oathkeeper-session-store.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:ory_oathkeeper_authorizer]
command=python main.py
directory=./ory/oathkeeper/authorizer/
environment=
    PORT="406%(process_num)1d0"
autostart=false
stdout_logfile=/tmp/oathkeeper-authorizer.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:http_echo]
command=docker run
    -e "JWT_HEADER=Authentication"
    -e "HTTP_PORT=8080"
    -p 127.0.0.1:40700:8080
    --name http-echo
    --rm
    mendhak/http-https-echo:26
autostart=false
stdout_logfile=/tmp/http-echo.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:statsd_exporter]
command=statsd_exporter 
    --web.listen-address=":9102"
    --web.enable-lifecycle
    --statsd.listen-udp=":9125"
    --statsd.listen-tcp=":9125"
    --statsd.unixsocket-mode="0700"
    ; --statsd.mapping-config=./prometheus/statsd_mapping.yml
autostart=true
stdout_logfile=/tmp/statsd_exporter.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:promlens]
command=promlens 
    --web.default-prometheus-url=="http://localhost:9090"
    --shared-links.sql.driver="sqlite"
    --shared-links.sql.dsn=":memory:"
    --shared-links.sql.create-tables
    ; --grafana.url="http://localhost:3000"
    ; --grafana.api-token-file=./prometheus/grafana-api-token-file.txt
    --web.listen-address=":40800"
autostart=false
stdout_logfile=/tmp/promlens.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:prometheus]
programs=haproxy_exporter,prometheus,prometheus_federate,alertmanager,grafana,node_exporter,statsd_exporter,promlens

;;; ETCD
[program:etcd_gateway]
command=etcd gateway start
    "--endpoints=172.16.0.10:2380,172.16.0.20:2380,172.16.0.30:2380"
    "--listen-addr=127.0.0.1:2379"
autostart=false
stdout_logfile=/tmp/etcd-gateway.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:etcd0]
command=etcd
    --name=etcd0 
    --data-dir=/tmp/etcd-data0
    --listen-client-urls=http://172.16.0.10:2379
    --advertise-client-urls=http://172.16.0.10:2379
    --listen-peer-urls=http://172.16.0.10:2380
    --initial-advertise-peer-urls=http://172.16.0.10:2380
    --initial-cluster-state=new
    --initial-cluster=etcd0=http://172.16.0.10:2380,etcd1=http://172.16.0.20:2380,etcd2=http://172.16.0.30:2380
    --initial-cluster-token=etcd-cluster-1
    --auto-compaction-retention=1
    --max-txn-ops=10000
    --max-request-bytes=104857600
autostart=false
stdout_logfile=/tmp/etcd0.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:etcd1]
command=etcd
    --name=etcd1 
    --data-dir=/tmp/etcd-data1
    --listen-client-urls=http://172.16.0.20:2379
    --advertise-client-urls=http://172.16.0.20:2379
    --listen-peer-urls=http://172.16.0.20:2380
    --initial-advertise-peer-urls=http://172.16.0.20:2380
    --initial-cluster-state=new
    --initial-cluster-token=etcd-cluster-1
    --initial-cluster=etcd0=http://172.16.0.10:2380,etcd1=http://172.16.0.20:2380,etcd2=http://172.16.0.30:2380
    --auto-compaction-retention=1
    --max-txn-ops=10000
    --max-request-bytes=104857600
autostart=false
stdout_logfile=/tmp/etcd1.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:etcd2]
command=etcd
    --name=etcd2 
    --data-dir=/tmp/etcd-data2
    --listen-client-urls=http://172.16.0.30:2379
    --advertise-client-urls=http://172.16.0.30:2379
    --listen-peer-urls=http://172.16.0.30:2380
    --initial-advertise-peer-urls=http://172.16.0.30:2380
    --initial-cluster-state=new
    --initial-cluster=etcd0=http://172.16.0.10:2380,etcd1=http://172.16.0.20:2380,etcd2=http://172.16.0.30:2380
    --initial-cluster-token=etcd-cluster-1
    --auto-compaction-retention=1
    --max-txn-ops=10000
    --max-request-bytes=104857600
autostart=false
stdout_logfile=/tmp/etcd2.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:etcd]
programs=etcd0,etcd1,etcd2,etcd_gateway

;;; Kafka
[program:kafka]
command=docker run 
    --rm
    --name kafka
    -v kafka:/bitnami
    -e 'KAFKA_CFG_ZOOKEEPER_CONNECT=localhost:2181'
    -e 'ALLOW_PLAINTEXT_LISTENER=yes'
    -e 'KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true'
    -e 'KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092'
    --network host
    docker.io/bitnami/kafka:3.3
autostart=false
startretries=10
startsecs=20
priority=997
stdout_logfile=/tmp/kafka.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:kafka_ui]
command=docker run
    --rm
    --name kafka-ui
    --network host
    -e 'KAFKA_CLUSTERS_0_NAME=local'
    -e 'KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181'
    -e 'KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=localhost:9092'
    -e 'SERVER_PORT=10100'
    provectuslabs/kafka-ui:v0.4.0
autostart=false
startretries=10
startsecs=10
priority=999
stdout_logfile=/tmp/kafka-ui.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:kafka_exporter]
command=docker run
    --rm
    --name kafka-exporter
    --network host
    bitnami/kafka-exporter:1-debian-11
    --kafka.server="localhost:9092"
    --log.level=debug
    --log.format=logfmt
    --web.listen-address=":9308"
    --zookeeper.server="localhost:2181"
    --concurrent.enable
    --offset.show-all
    --kafka.version="3.3.1"
    --web.telemetry-path="/metrics"
autostart=false
startretries=10
startsecs=10
priority=999
stdout_logfile=/tmp/kafka-exporter.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:kafka_jmx_exporter]
command=docker run
    --rm
    --name kafka-jmx-exporter
    --network host
    bitnami/jmx-exporter:0-debian-11
autostart=false
startretries=10
startsecs=10
priority=999
stdout_logfile=/tmp/kafka-jmx-exporter.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:zookeeper]
command=docker run 
    --rm
    --name zookeeper
    -v zookeeper:/bitnami
    --network host
    -e 'ALLOW_ANONYMOUS_LOGIN=yes'
    bitnami/zookeeper:3.8
autostart=false
startsecs=20
startretries=5
priority=995
stdout_logfile=/tmp/zookeeper.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:kafka]
programs=kafka,zookeeper,kafka_exporter,kafka_ui

;;; Jaeger
[program:jaeger]
command=docker run
    --rm
    --name jaeger
    -e 'COLLECTOR_OTLP_ENABLED=true'
    -e 'COLLECTOR_ZIPKIN_HTTP_PORT=9411'
    -p 5775:5775/udp
    -p 5778:5778
    -p 6831:6831/udp
    -p 6832:6832/udp
    -p 16686:16686
    -p 14268:14268
    -p 9411:9411
    jaegertracing/all-in-one:1
autostart=false
;startsecs=20
;startretries=5
;priority=995
stdout_logfile=/tmp/jaeger.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[program:bookstore]
command=python main.py
directory=./ory/bookstore-app
environment=
    PYTHONPATH=.,
    DATABASE_URL="../../persistence/bookstore.db",
    PORT="4100%(process_num)1d"
autostart=false
stdout_logfile=/tmp/bookstore.log
redirect_stderr=true
stdout_logfile_maxbytes=10MB

[group:ory]
programs=ory_mailslurper,ory_kratos,ory_keto,ory_hydra,ory_oathkeeper,ory_kratos_serverside_client_python,ory_oathkeeper_sessionstore,http_echo,ory_oathkeeper_authorizer,jaeger,haproxy
